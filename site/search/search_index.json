{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"sections/1-homePage/home/","title":"In\u00edcio","text":"\u2615 Caf\u00e9 do S\u00edtio"},{"location":"sections/2-docPage/1-cenarioAtual/","title":"1. Cen\u00e1rio Atual do Cliente e do Neg\u00f3cio","text":"<p>Digite aqui sua documenta\u00e7\u00e3o</p>"},{"location":"sections/2-docPage/1-cenarioAtual/#historico-de-versao","title":"Historico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores --/--/-- -- -- -- --"},{"location":"sections/2-docPage/2-solucaoProposta/","title":"2. Solu\u00e7\u00e3o Proposta","text":"<p>Digite aqui sua documenta\u00e7\u00e3o</p>"},{"location":"sections/2-docPage/2-solucaoProposta/#historico-de-versao","title":"Historico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores --/--/-- -- -- -- --"},{"location":"sections/2-docPage/3-estrategiasEngSoftware/","title":"3. Estrat\u00e9gias de Engenharia de Software","text":"<p>Digite aqui sua documenta\u00e7\u00e3o</p>"},{"location":"sections/2-docPage/3-estrategiasEngSoftware/#historico-de-versao","title":"Historico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores --/--/-- -- -- -- --"},{"location":"sections/2-docPage/4-cronogramaEntregas/","title":"4. Cronograma e Entregas","text":"<p>Digite aqui sua documenta\u00e7\u00e3o</p>"},{"location":"sections/2-docPage/4-cronogramaEntregas/#historico-de-versao","title":"Historico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores --/--/-- -- -- -- --"},{"location":"sections/2-docPage/5-interacaoEquipeCliente/","title":"5. Intera\u00e7\u00e3o entre Equipe e Cliente","text":"<p>Digite aqui sua documenta\u00e7\u00e3o</p>"},{"location":"sections/2-docPage/5-interacaoEquipeCliente/#historico-de-versao","title":"Historico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores --/--/-- -- -- -- --"},{"location":"sections/3-politicas/gcs/","title":"Plano de Ger\u00eancia e Configura\u00e7\u00e3o de Software","text":"<p>Este documento tem como objetivo apresentar as ferramentas, pol\u00edticas e regras adotadas pelo projeto Caf\u00e9 do S\u00edtio para auxiliar quem deseja contribuir.</p>"},{"location":"sections/3-politicas/gcs/#ferramentas","title":"Ferramentas","text":"Ferramenta Finalidade GitHub Hospedagem e versionamento de c\u00f3digo GitHub Pages Hospedagem de p\u00e1gina web para reposit\u00f3rio GitHub"},{"location":"sections/3-politicas/gcs/#politica-de-issues","title":"Pol\u00edtica de Issues","text":"<p>Caso encontre um bug ou tenha alguma sugest\u00e3o de melhoria para o software, \u00e9 poss\u00edvel criar uma issue seguindo os passos abaixo:</p> <p>Escolha o tipo de issue a ser criado (Hist\u00f3ria de Usu\u00e1rio, documenta\u00e7\u00e3o, task ou corre\u00e7\u00e3o de bug) Escreva um t\u00edtulo sucinto para a issue e preencha a descri\u00e7\u00e3o da issue seguindo os passos e as orienta\u00e7\u00f5es do template.</p> <p>Preencha informa\u00e7\u00f5es adicionais caso possua (executores, \u00e9pico, marco, hist\u00f3ria do usu\u00e1rio etc) Tanto o t\u00edtulo como a descri\u00e7\u00e3o da issue devem estar escritos em portugu\u00eas e seguir suas regras de sintaxe e sem\u00e2ntica.</p>"},{"location":"sections/3-politicas/gcs/#politica-de-branches","title":"Pol\u00edtica de Branches","text":""},{"location":"sections/3-politicas/gcs/#repositorios-de-codigo","title":"Reposit\u00f3rios de C\u00f3digo","text":"<p>Para uma mudan\u00e7a chegar a branch master (branch est\u00e1vel) os passos abaixo s\u00e3o seguidos:</p> <ol> <li> <p>Toda nova branch deve ser feita a partir da <code>Develop</code>.</p> </li> <li> <p>Ao resolver a issue proposta a nova branch deve ser merjada e comparada em rela\u00e7\u00e3o \u00e0 <code>develop</code>.</p> </li> <li> <p>Caso o PR seja aprovado pela equipe, a nova branch ser\u00e1 deletada e seu conte\u00fado integrado \u00e0 <code>develop</code>.</p> </li> <li> <p>Apenas quando a ramifica\u00e7\u00e3o develop apresentar instabilidade, uma nova ramifica\u00e7\u00e3o chamada <code>release</code> dever\u00e1 ser criada baseada na develop e merjada na <code>main</code>.</p> </li> </ol> <p>ATEN\u00c7\u00c3O! | NENHUMA BRANCH DEVER\u00c1 SER FEITA A PARTIR DA <code>main</code></p>"},{"location":"sections/3-politicas/gcs/#repositorio-de-documentacao","title":"Reposit\u00f3rio de Documenta\u00e7\u00e3o","text":"<ol> <li> <p>Para uma mudan\u00e7a chegar a branch <code>mainDoc</code> os passos abaixo s\u00e3o seguidos:</p> </li> <li> <p>Toda nova branch deve ser feita a partir da <code>mainDoc</code>.</p> </li> <li> <p>Ao resolver a issue proposta, a nova branch deve ser mergeada e comparada em rela\u00e7\u00e3o \u00e0 <code>mainDoc</code>.</p> </li> <li> <p>Caso o PR seja aprovado pela equipe, a nova branch ser\u00e1 deletada e seu conte\u00fado integrado \u00e0 <code>mainDoc</code>.</p> </li> </ol>"},{"location":"sections/3-politicas/gcs/#regras-de-nomenclatura","title":"Regras de Nomenclatura","text":"<p>Toda nova branch criada no reposit\u00f3rio do Caf\u00e9 do S\u00edtio deve se propor a resolver uma issue espec\u00edfica, o nome da branch deve seguir as regras da pol\u00edticas do Git Flow:</p> <p></p>"},{"location":"sections/3-politicas/gcs/#mainmaster","title":"Main/Master:","text":"<p>Principal branch, aqui \u00e9 onde temos todo o c\u00f3digo de produ\u00e7\u00e3o. Todas as novas funcionalidades que est\u00e3o sendo desenvolvidas, em algum momento, ser\u00e3o mescladas ou associadas \u00e0 main. As formas de interagir com essa branch s\u00e3o atrav\u00e9s de uma Hotfix ou de uma nova Release.</p>"},{"location":"sections/3-politicas/gcs/#develop","title":"Develop:","text":"<p>\u00c9 a branch onde fica o c\u00f3digo do pr\u00f3ximo deploy. Ela serve como uma linha do tempo com os \u00faltimos desenvolvimentos, isso significa que ela possui funcionalidades que ainda n\u00e3o foram publicadas e que posteriormente v\u00e3o ser associadas com a branch Master.</p>"},{"location":"sections/3-politicas/gcs/#feature","title":"Feature:","text":"<p>S\u00e3o branches utilizadas para o desenvolvimento de funcionalidades espec\u00edficas. As branchs nessa categoria devem ter o prefixo <code>feature/</code>, tal como no exemplo abaixo: </p> <pre><code>feature/nome-da-feature\n</code></pre> <p>\u00c9 importante saber que essas features branches s\u00e3o criadas sempre a partir da branch <code>Develop</code>. Portanto, quando finalizada, elas s\u00e3o removidas ap\u00f3s realizar o merge com a Branch Develop. Se houver 10 funcionalidades a serem desenvolvidas, ent\u00e3o dever\u00e1 ser criada 10 branches independentes.</p> <p>\u00c9 importante salientar que as branches de features n\u00e3o podem ter intera\u00e7\u00e3o com a branch <code>main</code>, apenas com a branch develop.</p>"},{"location":"sections/3-politicas/gcs/#hotfix","title":"Hotfix:","text":"<p>\u00c9 uma branch criada a partir da <code>main</code> para realizar corre\u00e7\u00f5es imediatas encontradas no sistema em produ\u00e7\u00e3o. Quando conclu\u00edda, ela \u00e9 exclu\u00edda ap\u00f3s realizar o merge com as branches <code>Main</code> e <code>Develop</code>.</p> <p>\u00c9 necess\u00e1rio uma branch de hotfix para cada hotfix que precisar ser implementada!</p> <p>A grande diferen\u00e7a entre Feature Branches e Branches de Hotfix \u00e9 que os Hotfix s\u00e3o criados a partir da Branch Master e quando os finalizamos, eles s\u00e3o mesclados tanto na Branch Master quanto na branch de desenvolvimento. Isso ocorre porque o bug est\u00e1 em ambos os ambientes.</p> <p>Al\u00e9m disso, quando fechar um Hotfix Branch, \u00e9 necess\u00e1rio criar uma tag com a nova vers\u00e3o do projeto.</p> <p>O nomeclatura para branchs de hotfix segue o padr\u00e3o com o prefixo <code>hotfix/</code> antes do nome da corre\u00e7\u00e3o:</p> <pre><code>hotfix/nome-do-hotfix\n</code></pre>"},{"location":"sections/3-politicas/gcs/#release","title":"Release:","text":"<p>Uma vez que uma etapa de desenvolvimento esteja conclu\u00edda, \u00e9 normal que em nossa Branch Develop todas as features e Hotfix estejam mescladas. Portanto, para as funcionalidades irem \u00e0 Branch Main, \u00e9 necess\u00e1rio criar uma Branch de Release.</p> <p>A Branch <code>Release</code> serve como ponte para fazer o merge da <code>Develop</code> para a <code>Main</code>. Ela funciona como ambiente de homologa\u00e7\u00e3o e \u00e9 removida ap\u00f3s realizar os testes do merge com a Main. Caso seja encontrado algum bug e haja alguma altera\u00e7\u00e3o, ela tamb\u00e9m deve ser sincronizada com a Develop. A regra de nomeclatura segue o mesmo padr\u00e3o dos anteriores:</p> <pre><code>release/nome-da-release\n</code></pre>"},{"location":"sections/3-politicas/gcs/#politica-de-commits","title":"Pol\u00edtica de Commits","text":"<p>Os commits devem ser at\u00f4micos (uma contribui\u00e7\u00e3o pequena para resolver um problema espec\u00edfico). A mensagem do commit deve relatar o que foi feito de maneira sucinta e direta, come\u00e7ar com um verbo e com a primeira letra mai\u00fascula. Al\u00e9m disso, contribui\u00e7\u00f5es feitas por mais de uma pessoa devem conter o comando \"Co-authored-by\" para identificar todos os autores envolvidos.</p> <p>Exemplo de contribui\u00e7\u00e3o feita por um autor:</p> <pre><code>git commit -m \"feat: Adicionando nova funcionalidade\"\n</code></pre> <p>Exemplo de contribui\u00e7\u00e3o feita por mais de um autor:</p> <pre><code>git commit -m \"feat: Adicionando uma carta vermelha\n\nCo-authored-by: Pessoa &lt;EmailGit@email.com&gt;\"\n</code></pre> <p>Todos os commits devem seguir o padr\u00e3o de nomeclatura do protocolo \"Conventional Commits\" para manter boas pr\u00e1ticas de escrita e facilitar o entendimento do versionamento do software aos outros programadores colaboradores do projeto. Os principais prefixos s\u00e3o:</p> <p><code>feat</code>- Commits do tipo feat indicam que seu trecho de c\u00f3digo est\u00e1 incluindo um novo recurso (se relaciona com o MINOR do versionamento sem\u00e2ntico).</p> <p><code>fix</code> - Commits do tipo fix indicam que seu trecho de c\u00f3digo commitado est\u00e1 solucionando um problema (bug fix), (se relaciona com o PATCH do versionamento sem\u00e2ntico).</p> <p><code>docs</code> - Commits do tipo docs indicam que houveram mudan\u00e7as na documenta\u00e7\u00e3o, como por exemplo no Readme do seu reposit\u00f3rio. (N\u00e3o inclui altera\u00e7\u00f5es em c\u00f3digo).</p> <p><code>test</code> - Commits do tipo test s\u00e3o utilizados quando s\u00e3o realizadas altera\u00e7\u00f5es em testes, seja criando, alterando ou excluindo testes unit\u00e1rios. (N\u00e3o inclui altera\u00e7\u00f5es em c\u00f3digo)</p> <p><code>build</code> - Commits do tipo build s\u00e3o utilizados quando s\u00e3o realizadas modifica\u00e7\u00f5es em arquivos de build e depend\u00eancias.</p> <p><code>perf</code> - Commits do tipo perf servem para identificar quaisquer altera\u00e7\u00f5es de c\u00f3digo que estejam relacionadas a performance.</p> <p><code>style</code> - Commits do tipo style indicam que houveram altera\u00e7\u00f5es referentes a formata\u00e7\u00f5es de c\u00f3digo, semicolons, trailing spaces, lint... (N\u00e3o inclui altera\u00e7\u00f5es em c\u00f3digo).</p> <p><code>refactor</code> - Commits do tipo refactor referem-se a mudan\u00e7as devido a refatora\u00e7\u00f5es que n\u00e3o alterem sua funcionalidade, como por exemplo, uma altera\u00e7\u00e3o no formato como \u00e9 processada determinada parte da tela, mas que manteve a mesma funcionalidade, ou melhorias de performance devido a um code review.</p> <p><code>chore</code> - Commits do tipo chore indicam atualiza\u00e7\u00f5es de tarefas de build, configura\u00e7\u00f5es de administrador, pacotes... como por exemplo adicionar um pacote no gitignore. (N\u00e3o inclui altera\u00e7\u00f5es em c\u00f3digo)</p> <p><code>ci</code> - Commits do tipo ci indicam mudan\u00e7as relacionadas a integra\u00e7\u00e3o cont\u00ednua (continuous integration).</p> <p><code>raw</code> - Commits to tipo raw indicam mudan\u00e7as relacionadas a arquivos de configura\u00e7\u00f5es, dados, features, parametros.</p> <p><code>cleanup</code> - Commits do tipo cleanup s\u00e3o utilizados para remover c\u00f3digo comentado, trechos desnecess\u00e1rios ou qualquer outra forma de limpeza do c\u00f3digo-fonte, visando aprimorar sua legibilidade e manutenibilidade.</p> <p><code>remove</code> - Commits do tipo remove indicam a exclus\u00e3o de arquivos, diret\u00f3rios ou funcionalidades obsoletas ou n\u00e3o utilizadas, reduzindo o tamanho e a complexidade do projeto e mantendo-o mais organizado.</p> <p>Para respeitar as regras definidas de commits, pedimos aten\u00e7\u00e3o aos pontos abaixo:</p> <ul> <li>A mensagem de commit DEVE ser prefixado com um tipo, que consiste em um substantivo, feat, fix, etc., seguido por um escopo OPCIONAL, s\u00edmbolo OPCIONAL !, e OBRIGAT\u00d3RIO terminar com dois-pontos e um espa\u00e7o.</li> <li>O tipo feat DEVE ser usado quando um commit adiciona um novo recurso ao seu aplicativo ou biblioteca.</li> <li>O tipo fix DEVE ser usado quando um commit representa a corre\u00e7\u00e3o de um problema em seu aplicativo ou biblioteca.</li> <li>Um escopo PODE ser fornecido ap\u00f3s um tipo. Um escopo DEVE consistir em um substantivo que descreve uma se\u00e7\u00e3o da base de c\u00f3digo entre par\u00eanteses, por exemplo, fix(parser): .</li> <li>Uma descri\u00e7\u00e3o DEVE existir depois do espa\u00e7o ap\u00f3s o prefixo tipo/escopo. A descri\u00e7\u00e3o \u00e9 um breve resumo das altera\u00e7\u00f5es de c\u00f3digo, por exemplo, fix: problema na interpreta\u00e7\u00e3o do array quando uma string tem v\u00e1rios espa\u00e7os.</li> <li>Um corpo de mensagem de commit mais longo PODE ser fornecido ap\u00f3s a descri\u00e7\u00e3o curta, fornecendo informa\u00e7\u00f5es contextuais adicionais sobre as altera\u00e7\u00f5es no c\u00f3digo. O corpo DEVE come\u00e7ar depois de uma linha em branco ap\u00f3s a descri\u00e7\u00e3o.</li> <li>Um corpo de mensagem de commit \u00e9 livre e PODE consistir em infinitos par\u00e1grafos separados por uma nova linha.</li> </ul>"},{"location":"sections/3-politicas/gcs/#politica-de-pull-request","title":"Pol\u00edtica de Pull Request","text":"<p>Para realizar um Pull Request (PR) para o reposit\u00f3rio \u00e9 necess\u00e1rio seguir os passos abaixo.</p> <p>Ao resolver uma issue, suba suas contribui\u00e7\u00f5es e crie um Pull Request Escreva um t\u00edtulo sucinto para o PR, Preencha a descri\u00e7\u00e3o do PR seguindo os passos e as orienta\u00e7\u00f5es do template que ser\u00e1 mostrado, Ligue o PR com a issue que ele resolve, Preencha informa\u00e7\u00f5es adicionais caso possua (executores, revisores, etc)</p>"},{"location":"sections/3-politicas/gcs/#politica-de-aprovacao","title":"Pol\u00edtica de Aprova\u00e7\u00e3o","text":"<p>Para um Pull Request ser aprovado nos reposit\u00f3rios de c\u00f3digo, a contribui\u00e7\u00e3o feita deve:</p> <ul> <li>Resolver apenas a issue espec\u00edfica ao qual se habilita a tratar;</li> <li>Respeitar todos os crit\u00e9rios de aceita\u00e7\u00e3o definidos na issue;</li> <li>Estar descrita em portugu\u00eas;</li> <li>Possuir cobertura de testes;</li> <li>Ser aprovada na integra\u00e7\u00e3o cont\u00ednua e nas ferramentas que ela executa;</li> <li>Conter l\u00f3gica eficaz para preservar a performance do sistema;</li> <li>Conter boas pr\u00e1ticas de programa\u00e7\u00e3o para preservar a qualidade do c\u00f3digo;</li> <li>N\u00e3o adicionar nenhum comportamento inesperado.</li> </ul> <p>Para um Pull Request ser aprovado no reposit\u00f3rio de documenta\u00e7\u00e3o, a contribui\u00e7\u00e3o feita deve:</p> <ul> <li>Ser relevante para o projeto;</li> <li>Resolver apenas a issue espec\u00edfica ao qual se habilita a tratar;</li> <li>Respeitar todos os crit\u00e9rios de aceita\u00e7\u00e3o definidos na issue;</li> <li>Estar na l\u00edngua portuguesa e seguir as normas desta;</li> <li>Estar na pasta e formato adequados;</li> <li>Ser aprovada na integra\u00e7\u00e3o cont\u00ednua e nas ferramentas que ela executa.</li> </ul>"},{"location":"sections/3-politicas/gcs/#politica-de-documentacao","title":"Pol\u00edtica de Documenta\u00e7\u00e3o","text":"<p>Para contribuir com a documenta\u00e7\u00e3o do projeto as regras definidas de commit, issue e PR tamb\u00e9m se aplicam, al\u00e9m destas pedimos aten\u00e7\u00e3o aos pontos abaixo:</p> <ul> <li>Todo documento dever\u00e1 possuir hist\u00f3rico de vers\u00e3o;</li> <li>Caso o documento seja extenso e possua m\u00faltiplos autores um hist\u00f3rico de vers\u00e3o deve ser inserido ao final dele, respeitando as seguintes regras: o versionamento da documenta\u00e7\u00e3o deve seguir um padr\u00e3o X.Z, onde X e Z s\u00e3o numerais inteiros n\u00e3o negativos que crescem em ordem crescente.</li> </ul> <p>Ao fazer grandes incrementos a vari\u00e1vel X cresce (1.0, 2.0, 3.0) e ao fazer pequenos incrementos a vari\u00e1vel Z cresce (1.1, 1.2, 1.3), ambas vari\u00e1veis come\u00e7am em zero e crescem de um em um. Ao subir a vers\u00e3o de X o valor de Z volta pra zero (1.4 -&gt; 2.0). O documento s\u00f3 entra na vers\u00e3o 1.0 se naquele momento ele estiver teoricamente finalizado.</p>"},{"location":"sections/3-politicas/gcs/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o:","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisores 05/11/24 1.0 Cria\u00e7\u00e3o do documento Daniel Rodrigues Ana Carolina, Marcella Sousa"}]}